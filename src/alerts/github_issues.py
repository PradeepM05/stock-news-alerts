import logging
import os
import json
import requests
from datetime import datetime
from typing import Dict, List, Any, Optional

logger = logging.getLogger(__name__)

class GitHubIssueCreator:
    """
    Creates GitHub issues for stock alerts.
    Uses the GitHub API via the GITHUB_TOKEN provided by GitHub Actions.
    """
    
    def __init__(self):
        """Initialize the GitHub issue creator."""
        self.token = os.environ.get('GITHUB_TOKEN')
        self.repo = os.environ.get('GITHUB_REPOSITORY')
        
        if not self.token:
            logger.warning("GITHUB_TOKEN not found in environment. GitHub issues cannot be created.")
        
        if not self.repo:
            logger.warning("GITHUB_REPOSITORY not found in environment. Using default 'user/stock-news-alerts'")
            self.repo = "user/stock-news-alerts"
    
    def create_issue(self, alert_data: Dict[str, Any]) -> Optional[str]:
        """
        Create a GitHub issue for an alert.
        
        Args:
            alert_data: Dictionary containing alert information
            
        Returns:
            Issue URL if successful, None otherwise
        """
        if not self.token:
            logger.error("Cannot create GitHub issue: no token available")
            return None
        
        # Extract data from the alert
        ticker = alert_data.get('ticker', 'UNKNOWN')
        title = alert_data.get('title', 'Untitled')
        sentiment = alert_data.get('sentiment', 'neutral')
        confidence = alert_data.get('confidence', 0)
        reasoning = alert_data.get('reasoning', 'No explanation provided')
        url = alert_data.get('url', '')
        source = alert_data.get('source', 'Unknown source')
        published = alert_data.get('published', datetime.now())
        
        # Format the published date
        if isinstance(published, str):
            try:
                published_str = published
            except:
                published_str = str(published)
        else:
            published_str = published.strftime('%Y-%m-%d %H:%M:%S')
        
        # Create issue labels based on sentiment
        labels = ["stock-alert", ticker]
        
        if sentiment == 'positive':
            labels.append("positive-news")
            title_prefix = "ðŸŸ¢ POSITIVE"
            issue_title = f"{title_prefix} ({ticker}): {title}"
            
        elif sentiment == 'negative':
            labels.append("negative-news")
            title_prefix = "ðŸ”´ NEGATIVE"
            issue_title = f"{title_prefix} ({ticker}): {title}"
            
        else:
            title_prefix = "âšª NEUTRAL"
            issue_title = f"{title_prefix} ({ticker}): {title}"
        
        # Create the issue body
        issue_body = f"""
## Stock Alert: {ticker}

**News Title:** {title}

**Source:** {source}

**Published:** {published_str}

**Sentiment:** {sentiment.capitalize()} (Confidence: {confidence:.2f})

**Reasoning:** {reasoning}

### Key Factors:
{self._format_list(alert_data.get('key_factors', []))}

**Market Impact:** {alert_data.get('market_impact', 'Unknown')}

**Action Recommendation:** {alert_data.get('action_recommendation', 'No specific action recommended')}

**Time Horizon:** {alert_data.get('time_horizon', 'Unknown')}

---

[View Original Article]({url})

---

*This alert was automatically generated by the Stock News Alert system.*
        """
        
        # Prepare the API request
        api_url = f"https://api.github.com/repos/{self.repo}/issues"
        headers = {
            "Authorization": f"token {self.token}",
            "Accept": "application/vnd.github.v3+json"
        }
        data = {
            "title": issue_title,
            "body": issue_body,
            "labels": labels
        }
        
        try:
            # Make the API request
            response = requests.post(api_url, headers=headers, json=data)
            response.raise_for_status()
            
            # Get the issue URL from the response
            issue_data = response.json()
            issue_url = issue_data.get('html_url')
            issue_number = issue_data.get('number')
            
            logger.info(f"Created GitHub issue #{issue_number} for {ticker}: {title}")
            
            return issue_url
            
        except Exception as e:
            logger.error(f"Error creating GitHub issue: {e}")
            return None
    
    def _format_list(self, items):
        """Format a list of items as a Markdown bullet list."""
        if not items:
            return "- No key factors identified"
            
        return "\n".join([f"- {item}" for item in items])